import dash 
from dash import dcc, html, Input, Output
import pandas as pd
import plotly.express as px 

# Load Machine data sensor 
df = pd.read_csv("Machine_sensor_data.csv")
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Initialize the Dash App 
app = dash.Dash(__name__)
app.title = "Machine Sensor Data Dashboard"

# App Layout 
app.layout = html.Div([
    html.H1("Machine Sensor Dashboar Data", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Select Machine: ", style={'fontSize': '20px'}),
        dcc.Dropdown(
            id='machine-dropdown',
            options=[{"label": m, "value": m} for m in sorted(df['machine_id'].unique())],
            value='MCH-001',
            clearable=False,
            style={'width': '300px'}
        ),
    ], style={'padding': '20px'}),

    dcc.Graph(id='sensor-graph'),

    html.Footer("Generated By Witschi | Machine Sensor data", style={'textAlign': 'center', 'marginTop': '30px', 'color': 'gray'})
])

# Callback to update the graph when a different machine is selected 
@app.callback(
    Output('sensor-graph', 'figure'),
    [Input('machine-dropdown', 'value')]
)
def update_graph(machine_id):
    dff = df[df['machine_id'] == machine_id]

    fig = px.line(
        df, 
        x='timestamp',
        y=['temperature', 'pressure', 'vibration', 'rpm'],
        title=f"Sensor Readinf for _{machine_id}", 
        template='plotly_dark'
    )

    fig.update_layout(legend_title_text='Sensor Type', template='plotly_dark')
    return fig 

# Run the server 
if __name__ == '__main__':
    app.run(debug=True)
